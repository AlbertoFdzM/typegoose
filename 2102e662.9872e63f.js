(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{134:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=n.a.createContext({}),s=function(e){var t=n.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=s(e.components);return n.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},b=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(r),b=a,m=l["".concat(i,".").concat(b)]||l[b]||d[b]||o;return r?n.a.createElement(m,c(c({ref:t},u),{},{components:r})):n.a.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},80:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return s}));var a=r(3),n=r(7),o=(r(0),r(134)),i={id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},c={unversionedId:"guides/use-without-emitDecoratorMetadata",id:"guides/use-without-emitDecoratorMetadata",isDocsHomePage:!1,title:'Use Without "emitDecoratorMetadata"',description:"Typegoose can be used without the option emitDecoratorMetadata, but it is generally recommeneded to enable it for auto-inferring from the typescript type",source:"@site/../docs/guides/use-without-emitDecoratorMetadata.md",slug:"/guides/use-without-emitDecoratorMetadata",permalink:"/typegoose/docs/guides/use-without-emitDecoratorMetadata",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/use-without-emitDecoratorMetadata.md",version:"current",sidebar:"guides",previous:{title:"Default Classes",permalink:"/typegoose/docs/guides/default-classes"},next:{title:"Custom Types",permalink:"/typegoose/docs/guides/advanced/custom-types"}},p=[{value:"Advantages to &quot;emitDecoratorMetadata&quot;",id:"advantages-to-emitdecoratormetadata",children:[]}],u={toc:p};function s(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Typegoose can be used without the option ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"}),Object(o.b)("inlineCode",{parentName:"a"},"emitDecoratorMetadata")),", but it is generally recommeneded to enable it for auto-inferring from the typescript type"),Object(o.b)("h2",{id:"advantages-to-emitdecoratormetadata"},'Advantages to "emitDecoratorMetadata"'),Object(o.b)("p",null,"With the use of ",Object(o.b)("inlineCode",{parentName:"p"},"emitDecoratorMetadata"),", it is not needed to be explicit about ",Object(o.b)("em",{parentName:"p"},"everything"),", like"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"class Kitten {\n  @prop({ required: true })\n  public name!: string;\n\n  @prop({ type: () => String, required: true })\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true })\n  public favoritePlacePriority!: Map<string, number>;\n}\n")),Object(o.b)("p",null,'would simply "compile" into the appropiate types, like ',Object(o.b)("inlineCode",{parentName:"p"},"Primitve"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Array")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Map")),Object(o.b)("p",null,"but when not having ",Object(o.b)("inlineCode",{parentName:"p"},"emitDecoratorMetadata")," enabled, everything needs to be explicitly defined:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'class Kitten {\n  @prop({ type: () => String, required: true }) // Default type is "Primitive"\n  public name!: string;\n\n  @prop({ type: () => String, required: true }, WhatIsIt.ARRAY)\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true }, WhatIsIt.MAP)\n  public favoritePlacePriority!: Map<string, number>;\n}\n')),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/typegoose/docs/api/decorators/prop#whatisit"}),"look here for what ",Object(o.b)("inlineCode",{parentName:"a"},"WhatIsIt")," is")),Object(o.b)("hr",null),Object(o.b)("p",null,"References:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"}),"tsconfig option ",Object(o.b)("inlineCode",{parentName:"a"},"emitDecoratorMetadata"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata"}),"Typescript explanation to decorators and Reflection"))))}s.isMDXComponent=!0}}]);