(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[9238],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,p=function(e,t){if(null==e)return{};var n,r,p={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,p=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),f=c(n),d=p,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||a;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var a=n.length,o=new Array(a);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:p,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1770:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(2122),p=n(9756),a=(n(7294),n(3905)),o=["components"],i={id:"ref-type",title:"Ref"},s={unversionedId:"api/types/ref-type",id:"api/types/ref-type",isDocsHomePage:!1,title:"Ref",description:"The Type Ref is the type used for References.",source:"@site/../docs/api/types/ref.md",sourceDirName:"api/types",slug:"/api/types/ref-type",permalink:"/typegoose/docs/api/types/ref-type",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/types/ref.md",version:"current",frontMatter:{id:"ref-type",title:"Ref"},sidebar:"docs",previous:{title:"Return Model Type",permalink:"/typegoose/docs/api/types/return-model-type"},next:{title:"Additional Types",permalink:"/typegoose/docs/api/types/additional-types"}},c=[{value:"Example",id:"example",children:[]}],l={toc:c};function u(e){var t=e.components,n=(0,p.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Type ",(0,a.kt)("inlineCode",{parentName:"p"},"Ref<Class, IDType>")," is the type used for ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/populate.html"},"References"),".",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("inlineCode",{parentName:"p"},"Class")," generic-parameter is used to set the class that is being referenced.",(0,a.kt)("br",{parentName:"p"}),"\n","The ",(0,a.kt)("inlineCode",{parentName:"p"},"IDType")," generic-parameter is used to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," type of the referenced class (Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"mongoose.Types.ObjectId"),").  "),(0,a.kt)("p",null,"There are ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/docs/api/functions/typeguards/is-document"},"typeguards")," to check if a Reference is populated."),(0,a.kt)("p",null,"For an more written out guide, there is the ",(0,a.kt)("a",{parentName:"p",href:"/typegoose/docs/guides/advanced/reference-other-classes"},"Reference Other Classes")," Guide."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Referenced Class in the examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Kitten {\n  @prop()\n  public name: string;\n}\n")),(0,a.kt)("p",null,"Reference Array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Cat {\n  @prop()\n  public name: string;\n\n  // Use `ref` for arrays too\n  @prop({ ref: 'Kitten' })\n  public babies?: Ref<Kitten>[];\n}\n")),(0,a.kt)("p",null,"Single Reference:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Person {\n  @prop()\n  public name: string;\n\n  // Use `ref` for single items\n  @prop({ ref: 'Cat' })\n  public pet?: Ref<Cat>;\n}\n")),(0,a.kt)("p",null,"Reference with different ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Cat {\n  @prop()\n  public _id: string;\n}\n\nclass Person {\n  @prop()\n  public name: string;\n\n  // The "type" (_id type) needs to be manually set, otherwise mongoose will default to "ObjectId"\n  // which is not compatible with other types (ObjectId !== String)\n  @prop({ ref: () => Cat, type: () => String })\n  public pet?: Ref<Cat, string>;\n}\n')))}u.isMDXComponent=!0}}]);