(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[569],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),s=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(u,".").concat(m)]||d[m]||l[m]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1380:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return p},metadata:function(){return u},toc:function(){return s},default:function(){return l}});var a=r(2122),n=r(9756),o=(r(7294),r(3905)),i=["components"],p={id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},u={unversionedId:"guides/use-without-emitDecoratorMetadata",id:"guides/use-without-emitDecoratorMetadata",isDocsHomePage:!1,title:'Use Without "emitDecoratorMetadata"',description:"Typegoose can be used without the option emitDecoratorMetadata, but it is generally recommeneded to enable it for auto-inferring from the typescript type",source:"@site/../docs/guides/use-without-emitDecoratorMetadata.md",sourceDirName:"guides",slug:"/guides/use-without-emitDecoratorMetadata",permalink:"/typegoose/docs/guides/use-without-emitDecoratorMetadata",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/guides/use-without-emitDecoratorMetadata.md",version:"current",frontMatter:{id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},sidebar:"guides",previous:{title:"Default Classes",permalink:"/typegoose/docs/guides/default-classes"},next:{title:"Custom Types",permalink:"/typegoose/docs/guides/advanced/custom-types"}},s=[{value:"Advantages to &quot;emitDecoratorMetadata&quot;",id:"advantages-to-emitdecoratormetadata",children:[]}],c={toc:s};function l(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Typegoose can be used without the option ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"},(0,o.kt)("inlineCode",{parentName:"a"},"emitDecoratorMetadata")),", but it is generally recommeneded to enable it for auto-inferring from the typescript type"),(0,o.kt)("h2",{id:"advantages-to-emitdecoratormetadata"},'Advantages to "emitDecoratorMetadata"'),(0,o.kt)("p",null,"With the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"emitDecoratorMetadata"),", it is not needed to be explicit about ",(0,o.kt)("em",{parentName:"p"},"everything"),", like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Kitten {\n  @prop({ required: true })\n  public name!: string;\n\n  @prop({ type: () => String, required: true })\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true })\n  public favoritePlacePriority!: Map<string, number>;\n}\n")),(0,o.kt)("p",null,'would simply "compile" into the appropiate types, like ',(0,o.kt)("inlineCode",{parentName:"p"},"Primitve"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Array")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Map")),(0,o.kt)("p",null,"but when not having ",(0,o.kt)("inlineCode",{parentName:"p"},"emitDecoratorMetadata")," enabled, everything needs to be explicitly defined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'class Kitten {\n  @prop({ type: () => String, required: true }) // Default type is "Primitive"\n  public name!: string;\n\n  @prop({ type: () => String, required: true }, WhatIsIt.ARRAY)\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true }, WhatIsIt.MAP)\n  public favoritePlacePriority!: Map<string, number>;\n}\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/typegoose/docs/api/decorators/prop#whatisit"},"look here for what ",(0,o.kt)("inlineCode",{parentName:"a"},"WhatIsIt")," is")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"References:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata"},"tsconfig option ",(0,o.kt)("inlineCode",{parentName:"a"},"emitDecoratorMetadata"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata"},"Typescript explanation to decorators and Reflection"))))}l.isMDXComponent=!0}}]);