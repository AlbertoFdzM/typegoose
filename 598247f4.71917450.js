(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{134:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),l=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=l(n),f=r,d=b["".concat(o,".").concat(f)]||b[f]||u[f]||p;return n?a.a.createElement(d,c(c({ref:t},s),{},{components:n})):a.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<p;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),p=(n(0),n(134)),o={id:"ref-type",title:"Ref"},c={unversionedId:"api/types/ref-type",id:"api/types/ref-type",isDocsHomePage:!1,title:"Ref",description:"The Type Ref is the type used for References.",source:"@site/../docs/api/types/ref.md",slug:"/api/types/ref-type",permalink:"/typegoose/docs/api/types/ref-type",editUrl:"https://github.com/typegoose/typegoose/edit/master/docs/../docs/api/types/ref.md",version:"current",sidebar:"docs",previous:{title:"Return Model Type",permalink:"/typegoose/docs/api/types/return-model-type"},next:{title:"Additional Types",permalink:"/typegoose/docs/api/types/additional-types"}},i=[{value:"Example",id:"example",children:[]}],s={toc:i};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(p.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,"The Type ",Object(p.b)("inlineCode",{parentName:"p"},"Ref<Class, IDType>")," is the type used for ",Object(p.b)("a",Object(r.a)({parentName:"p"},{href:"https://mongoosejs.com/docs/populate.html"}),"References"),".",Object(p.b)("br",{parentName:"p"}),"\n","The ",Object(p.b)("inlineCode",{parentName:"p"},"Class")," generic-parameter is used to set the class that is being referenced.",Object(p.b)("br",{parentName:"p"}),"\n","The ",Object(p.b)("inlineCode",{parentName:"p"},"IDType")," generic-parameter is used to set the ",Object(p.b)("inlineCode",{parentName:"p"},"_id")," type of the referenced class (Default: ",Object(p.b)("inlineCode",{parentName:"p"},"mongoose.Types.ObjectId"),").  "),Object(p.b)("p",null,"There are ",Object(p.b)("a",Object(r.a)({parentName:"p"},{href:"/typegoose/docs/api/functions/typeguards/is-document"}),"typeguards")," to check if a Reference is populated."),Object(p.b)("p",null,"For an more written out guide, there is the ",Object(p.b)("a",Object(r.a)({parentName:"p"},{href:"/typegoose/docs/guides/advanced/reference-other-classes"}),"Reference Other Classes")," Guide."),Object(p.b)("h2",{id:"example"},"Example"),Object(p.b)("p",null,"Referenced Class in the examples:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"class Kitten {\n  @prop()\n  public name: string;\n}\n")),Object(p.b)("p",null,"Reference Array:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"class Cat {\n  @prop()\n  public name: string;\n\n  // Use `ref` for arrays too\n  @prop({ ref: 'Kitten' })\n  public babies?: Ref<Kitten>[];\n}\n")),Object(p.b)("p",null,"Single Reference:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"class Person {\n  @prop()\n  public name: string;\n\n  // Use `ref` for single items\n  @prop({ ref: 'Cat' })\n  public pet?: Ref<Cat>;\n}\n")),Object(p.b)("p",null,"Reference with different ",Object(p.b)("inlineCode",{parentName:"p"},"_id")," type:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'class Cat {\n  @prop()\n  public _id: string;\n}\n\nclass Person {\n  @prop()\n  public name: string;\n\n  // The "type" (_id type) needs to be manually set, otherwise mongoose will default to "ObjectId"\n  // which is not compatible with other types (ObjectId !== String)\n  @prop({ ref: () => Cat, type: () => String })\n  public pet?: Ref<Cat, string>;\n}\n')))}l.isMDXComponent=!0}}]);